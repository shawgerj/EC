/*
** Copyright (C) 2016 Mellanox Technologies
**
** Licensed under the Apache License, Version 2.0 (the "License");
** you may not use this file except in compliance with the License.
** You may obtain a copy of the License at:
**
** http://www.apache.org/licenses/LICENSE-2.0
**
** Unless required by applicable law or agreed to in writing, software
** distributed under the License is distributed on an "AS IS" BASIS,
** WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
** either express or implied. See the License for the specific language
** governing permissions and  limitations under the License.
**
*/

#include "ec_test_env.h"
#include <string.h>
#include <infiniband/verbs.h>
#include <infiniband/verbs_exp.h>

JerasureCoder::JerasureCoder(coder_options* opts)
  : opts_(opts) { }

JerasureCoder::Encode(char* src, char** dest, size_t len) {
  return 0;
}

JerasureCoder::Decode(char* src, char** dest, size_t len) {
  return 0;
}

ConnectXCoder::ConnectXCoder(coder_options* opts, char* name)
  : opts_(opts) {
  struct ibv_device* device;
  struct ibv_context* context;

  printf("Checking EC capabilities for %s\n", name);

  // find the device
  device = find_device(name);
  if (!device) {
    printf("Couldn't open device\n");
    exit(1);
  }

  // open the device
  context = ibv_open_device(device);
  if (!context) {
    printf("Couldn't get context for %s\n", name);
    exit(1);
  }

  // ensure EC is supported
  supports_ec(context);
  
  connectx_ctx_ = malloc(sizeof(struct hw_coder_ctx));
  connectx_ctx->device = device;
  connectx_ctx->context = context;
}

int ConnectXCoder::Encode(char* src, char** dest, size_t len) {
  return 0;
}

int ConnectXCoder::Decode(char* data, char** dest, size_t len) {
  return 0;
}


struct ibv_device* ConnectXCoder::find_device(const char *devname)
{
  struct ibv_device **dev_list = NULL;
  struct ibv_device *device = NULL;

  dev_list = ibv_get_device_list(NULL);
  if (!dev_list) {
    printf("Failed to get IB devices list");
    return NULL;
  }

  if (!devname) {
    device = *dev_list;
    if (!device)
      printf("No IB devices found\n");
  } else {
    int i;

    for (i = 0; dev_list[i]; ++i)
      if (!strcmp(ibv_get_device_name(dev_list[i]),
		  devname))
	break;
    device = dev_list[i];
    if (!device)
      printf("IB device %s not found\n", devname);
  }

  ibv_free_device_list(dev_list);

  return device;
}

void ConnectXCoder::supports_ec(struct ibv_context* context) {
  struct ibv_exp_device_attr dattr;
  int err = 0;
  memset(&dattr, 0, sizeof(dattr));
  dattr.comp_mask = IBV_EXP_DEVICE_ATTR_EXP_CAP_FLAGS | IBV_EXP_DEVICE_ATTR_EC_CAPS;
	
  err = ibv_exp_query_device(context, &dattr);
  if (err) {
    printf("Couldn't query device for EC offload caps.\n");
    if (err == ENOSYS) {
      printf("ERROR: Function not implemented.\n");
    } else if (err == EOPNOTSUPP) {
      printf("ERROR: Operation not supported.\n");
    }
    ibv_close_device(context);
    exit(1);
  }

  if (!(dattr.exp_device_cap_flags & IBV_EXP_DEVICE_EC_OFFLOAD)) {
    printf("EC offload not supported by driver.\n");
    ibv_close_device(context);
    exit(1);
  }

  printf("EC offload supported by driver.\n");
}
